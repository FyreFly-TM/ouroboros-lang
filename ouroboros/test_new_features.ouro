// Test file for new Ouroboros language features

// Testing void function
void testVoid() {
    print("This is a void function");
}

// Testing typed variables
int testInt() {
    int x = 10;
    int y = 20;
    return x + y;
}

float testFloat() {
    float pi = 3.14159;
    float radius = 5.0;
    return pi * radius * radius;
}

// Testing structs
struct Point {
    float x;
    float y;
}

// Testing classes
class Vector2D {
    float x;
    float y;
    
    // Constructor
    void Vector2D(float x_val, float y_val) {
        this.x = x_val;
        this.y = y_val;
    }
    
    // Method
    float length() {
        return to_float(sqrt(this.x * this.x + this.y * this.y));
    }
    
    // Method with parameters
    void add(Vector2D other) {
        this.x = this.x + other.x;
        this.y = this.y + other.y;
    }
}

// Testing generics
class Stack<T> {
    T[] items;
    int size;
    
    void Stack() {
        this.items = T[10]; // Array of type T with size 10
        this.size = 0;
    }
    
    void push(T item) {
        if (this.size < 10) {
            this.items[this.size] = item;
            this.size = this.size + 1;
        }
    }
    
    T pop() {
        if (this.size > 0) {
            this.size = this.size - 1;
            return this.items[this.size];
        }
        return null;
    }
}

// Main function to test everything
function main() {
    print("=== Testing New Language Features ===");
    
    // Test void function
    testVoid();
    
    // Test typed variables
    int result = testInt();
    print("Int result: " + to_string(result));
    
    float area = testFloat();
    print("Float result: " + to_string(area));
    
    // Test struct
    struct Point p;
    p.x = 3.0;
    p.y = 4.0;
    print("Point: (" + to_string(p.x) + ", " + to_string(p.y) + ")");
    
    // Test class
    Vector2D v1 = new Vector2D(5.0, 12.0);
    print("Vector length: " + to_string(v1.length()));
    
    Vector2D v2 = new Vector2D(2.0, 3.0);
    v1.add(v2);
    print("After addition: (" + to_string(v1.x) + ", " + to_string(v1.y) + ")");
    
    // Test generics
    Stack<int> intStack = new Stack<int>();
    intStack.push(10);
    intStack.push(20);
    intStack.push(30);
    
    print("Popped from int stack: " + to_string(intStack.pop()));
    print("Popped from int stack: " + to_string(intStack.pop()));
    
    Stack<Vector2D> vecStack = new Stack<Vector2D>();
    vecStack.push(new Vector2D(1.0, 2.0));
    vecStack.push(new Vector2D(3.0, 4.0));
    
    Vector2D poppedVec = vecStack.pop();
    print("Popped vector: (" + to_string(poppedVec.x) + ", " + to_string(poppedVec.y) + ")");
    
    print("=== All tests completed successfully! ===");
    
    return 0;
} 